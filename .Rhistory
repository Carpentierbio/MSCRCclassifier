point.size = 5,
line.size = 1.3,
mainbar.y.label = "IntersectionSize",
sets.x.label = "",
mb.ratio = c(0.60, 0.40),
text.scale = c(4, 4, 0.5, 0.5,3, 4))
p1
library(RTN)
library(RTN)
library(RedeR)
rdp <- RedPort()
calld(rdp)
load("D:/HELingli_gapps/phd/Semasters_classes/semaster A 2020.21 courses/BMS8001 Ethics/Proposal/R/rtni2.RData")
load("D:/HELingli_gapps/phd/Semasters_classes/semaster A 2020.21 courses/BMS8001 Ethics/Proposal/R/rtna.2.RData")
rtna.rslt <- rtna.2@results$MRA.results
dim(rtna.rslt)  # 164 8
rtna.rslt.2 = rtna.rslt[which(rtna.rslt$Adjusted.Pvalue < 0.05),]
nrow(rtna.rslt.2)  #8
mrmiRNAs = rtna.rslt.2$Regulon
g <- tni.graph(rtni2, regulatoryElements = c("hsa-mir-934",
"hsa-mir-18a",
"hsa-mir-452",
"hsa-mir-135b",
"hsa-mir-577",
"hsa-mir-17", "hsa-mir-20a","hsa-mir-150") )
g <- tni.graph(rtni2, regulatoryElements =  mrmiRNAs )
library(GEOquery)
gset = getGEO("GPL13534")
library(GEOquery)
BiocManager::install("GEOquery")
library(GEOquery)
BiocManager::install("GEOquery")
library(GEOquery)
install.packages("vctrs")
install.packages("vctrs")
BiocManager::install("GEOquery")
library(GEOquery)
gset = getGEO("GPL13534")
getwd()
gset = getGEO("GPL13534",destdir = "D:\HELingli_gapps\phd\Projects\My_project_06_multi_omic_fusion_classification")
gset = getGEO("GPL13534",destdir = "D:/HELingli_gapps/phd/Projects/My_project_06_multi_omic_fusion_classification")
install.packages("oncoPredict")
version
library(installr)
install.packages("installr")
library(installr)
updateR()
version
load("D:/OneDrive - The Chinese University of Hong Kong/124severFile2024/whole_v9_re_vis_CRC_20230515/rda_code_v1/TCGA_CRC_custom_cn_data.rda")
View(custom_cn_data)
14000-5750
249088+12216
？mafCompare
?mafCompare
??mafCompare
library(rmarkdown)
grDevices::adjustcolor("#ce1141", alpha.f = 0.2)
grDevices::adjustcolor("#ce1141", alpha.f = 0.5)
grDevices::adjustcolor("#ce1141", alpha.f = 0.6)
grDevices::adjustcolor("#7f3c8d", alpha.f = 0.6)
grDevices::adjustcolor("#7f3c8d", alpha.f = 0.7)
grDevices::adjustcolor("#004b8d", alpha.f = 0.7) "#337AB7"
grDevices::adjustcolor("#004b8d", alpha.f = 0.7)
grDevices::adjustcolor("#004b8d", alpha.f = 0.9)
# 定义颜色和标签
colors <- c('#F95273', "#000000", "#d1cdb8", "#B648BB", "#0082ca",
"#e76829", '#565656', "#ffdd00", "#004B8DE6", "#199051", "white")
labels <- c("ADI", "NORM", "GLAND", "VESSEL", "DEB",
"LYM", "MUC", "MUS", "STR", "TUM", "BACK")
# 创建数据框
df <- data.frame(label = labels, color = colors)
# 绘制图例
ggplot(df, aes(x = label, y = 1, fill = label)) +
geom_tile() +
scale_fill_manual(values = colors, labels = labels) +
theme_void() +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Labels"))
library(ggplot2)
# 绘制图例
ggplot(df, aes(x = label, y = 1, fill = label)) +
geom_tile() +
scale_fill_manual(values = colors, labels = labels) +
theme_void() +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Labels"))
ggplot(df, aes(x = label, y = 1, fill = label)) +
geom_tile(color = "black") +
scale_fill_manual(values = colors, labels = labels) +
theme_void() +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Labels"))
ggplot(df, aes(x = label, y = 1, fill = label)) +
geom_tile(color = "black") +
scale_fill_manual(values = colors, labels = labels) +
theme_void() +
theme(legend.position = "top") +
guides(fill = guide_legend(title = "Labels"))
ggplot(df, aes(x = label, y = 1, fill = label)) +
geom_tile(color = "black") +
scale_fill_manual(values = colors, labels = labels) +
theme_void() +
theme(legend.position = "right") +
guides(fill = guide_legend(title = "Labels"))
# 绘制图例
ggplot(df, aes(x = label, y = 1, fill = label)) +
geom_tile(color = "black") +
scale_fill_manual(values = colors, labels = labels) +
theme_void() +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Labels"))
rm(list=ls())
rm(list=ls())
# setwd("~/Projects/Proj_6_multi_omic_fusion_classification/whole_v9_re_vis_CRC_20230515")
setwd("D:/OneDrive - The Chinese University of Hong Kong/124severFile2024/whole_v9_re_vis_CRC_20230515")
require(magrittr)
require(ggpubr)
library(HTSanalyzeR2)
rm(list=ls())
# setwd("~/Projects/Proj_6_multi_omic_fusion_classification/whole_v9_re_vis_CRC_20230515")
setwd("D:/OneDrive - The Chinese University of Hong Kong/124severFile2024/whole_v9_re_vis_CRC_20230515")
require(magrittr)
require(ggpubr)
# library(HTSanalyzeR2)
library(org.Hs.eg.db)
library(KEGGREST)
Version = "v2"
rda_fdr = paste("rda_code_", Version, sep = "")
if(!exists(rda_fdr)){dir.create(rda_fdr)}
figure_fdr = paste("figure_code_", Version, sep = "")
if(!exists(figure_fdr)){dir.create(figure_fdr)}
gsea_fdr = paste("rda_GSEA_code_", Version, sep = "")
if(!exists(gsea_fdr)){dir.create(gsea_fdr)}
a1=0.400
a2=0.525
a3=1-a1-a2
hyper_vis = function(class1,class2){
# phyper() gives the distribution function
# ak_mn_hyper <- table(merged_pdata$MultiLabel, merged_pdata$CMS_final_network_plus_RFclassifier_in_nonconsensus_samples)
ak_mn_hyper <- table(class1,class2)
print(ak_mn_hyper)
oN<-matrix(NA,nrow=nrow(ak_mn_hyper),ncol=ncol(ak_mn_hyper))
for(i in 1:nrow(ak_mn_hyper)){
for(j in 1:ncol(ak_mn_hyper)){
oN[i,j]<-phyper(ak_mn_hyper[i,j]-1,sum(ak_mn_hyper[,j]),sum(ak_mn_hyper)-sum(ak_mn_hyper[,j]),sum(ak_mn_hyper[i,]),lower.tail=FALSE)
}
}
oN
oN <- matrix(p.adjust(oN),ncol = length(unique(class2)), byrow = F)
oN[which(oN==0)] = 1e-270
oN_log10 <- -log10(oN)
# sec_min = min(oN[oN!=min(oN)])
# oN_log10 = -log10(oN+sec_min/2)
rownames(oN_log10)<-  rownames(ak_mn_hyper)
colnames(oN_log10)<- colnames(ak_mn_hyper)
# oN_log10[oN_log10 > 10]=10
oN_log10[oN_log10 > 20]=20
oN_log10
require(reshape)
oN_melt <- melt(oN_log10)
require(ggplot2)
lengendTitleSize = 9
axisTextSize = 9
lengendTextSize = 9
p1<-ggplot(data = oN_melt, aes(X1, X2, fill = value))+
geom_tile(color = "gray")+  ##add gray line between block
# geom_text(aes(label=round(value,2))) +
scale_fill_gradient2(low ="white", high = "darkred",
# midpoint =3,
# midpoint =-log10(0.05),
# limit = c(0,300),
space = "Lab",   #  #fc6c85  red #f5c767yellow
name=expression(-log[10]~'('*'P'*')')) +
theme_minimal()+
theme(legend.title =element_text(size=lengendTitleSize ,face = "plain"),
legend.text=element_text(size=lengendTextSize,face = "plain"),
axis.text.x = element_text(angle = 30, vjust = 1,
size = axisTextSize, hjust = 1,face="plain", color = "black"), #bold
axis.text.y = element_text(size = axisTextSize,face = "plain", color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank()  )+
theme(legend.position="top") +
# ggtitle(paste(para, "_", a1*1000,a2*1000,sep = "")) +
theme(plot.title = element_text(vjust = -2, face = "plain",color = "blue", size = 18)) +
coord_fixed()
return(p1)
}
# 2.1 SYSU CRC N=99
dataset = "SYSU_mRNA_miRNA"
# MSCRC label
load("~/Projects/Proj_6_multi_omic_fusion_classification/whole_v9_re_vis_CRC_20230515/rda_code_v2/SYSU_mRNA_miRNA_400_525_ge_mir_omic_label_from_NB.rda")
label_tmp= paste("MSCRC", Label,sep = "")
names(label_tmp) <- names(Label)
# CMS label
load("/data/home2/lingli/Projects/Proj_6_multi_omic_fusion_classification/whole_v9_CRC_20210616/R_code_v2/loop_sur_and_GSEA_km_euclidean/rda_clinical/ge.prog_TPM_based_ARGO.380samples.RData")
# 2.2 CIT
dataset = "CIT"
# MSCRC label
load("~/Projects/Proj_6_multi_omic_fusion_classification/whole_v9_re_vis_CRC_20230515/rda_code_v2/CIT_GSE39582_400_525_ge_omic_label_from_NB.rda")
# MSCRC label
load("./rda_code_v2/CIT_GSE39582_400_525_ge_omic_label_from_NB.rda")
dataset = "CIT"
# MSCRC label
load("./rda_code_v2/CIT_GSE39582_400_525_ge_omic_label_from_NB.rda")
label= paste("MSCRC", Label,sep = "")
names(label) <- names(Label)
length(label)
# CMS label
load("D:/OneDrive - The Chinese University of Hong Kong/124severFile2024/whole_v7_20210412/Validation_codev1_550375pameuclidean/1omics_GSE39582/rda/merged_pdata_01.RData")
# merged_pdata_01
merged_pdata_02 = merged_pdata_01[-which(as.numeric(merged_pdata_01$rfs.delay)>150 | as.numeric(merged_pdata_01$os.delay)>150),]  # 486
length(merged_pdata_02$rf)
label = label[which(names(label)%in%merged_pdata_02$geo_accession)]
identical(names(label),merged_pdata_02$geo_accession)
merged_pdata_02$MSCRC = label
p2 = hyper_vis(class1 = merged_pdata_02$MSCRC , class2 = merged_pdata_02$rf)
p2
hyper_vis = function(class1,class2){
# phyper() gives the distribution function
# ak_mn_hyper <- table(merged_pdata$MultiLabel, merged_pdata$CMS_final_network_plus_RFclassifier_in_nonconsensus_samples)
ak_mn_hyper <- table(class1,class2)
print(ak_mn_hyper)
oN<-matrix(NA,nrow=nrow(ak_mn_hyper),ncol=ncol(ak_mn_hyper))
for(i in 1:nrow(ak_mn_hyper)){
for(j in 1:ncol(ak_mn_hyper)){
oN[i,j]<-phyper(ak_mn_hyper[i,j]-1,sum(ak_mn_hyper[,j]),sum(ak_mn_hyper)-sum(ak_mn_hyper[,j]),sum(ak_mn_hyper[i,]),lower.tail=FALSE)
}
}
oN
oN <- matrix(p.adjust(oN),ncol = length(unique(class2)), byrow = F)
oN[which(oN==0)] = 1e-270
oN_log10 <- -log10(oN)
# sec_min = min(oN[oN!=min(oN)])
# oN_log10 = -log10(oN+sec_min/2)
rownames(oN_log10)<-  rownames(ak_mn_hyper)
colnames(oN_log10)<- colnames(ak_mn_hyper)
# oN_log10[oN_log10 > 10]=10
oN_log10[oN_log10 > 20]=20
oN_log10
require(reshape)
oN_melt <- melt(oN_log10)
require(ggplot2)
lengendTitleSize = 9
axisTextSize = 9
lengendTextSize = 9
p1<-ggplot(data = oN_melt, aes(X1, X2, fill = value))+
geom_tile(color = "gray")+  ##add gray line between block
geom_text(aes(label=round(value,2))) +
scale_fill_gradient2(low ="white", high = "darkred",
# midpoint =3,
# midpoint =-log10(0.05),
# limit = c(0,300),
space = "Lab",   #  #fc6c85  red #f5c767yellow
name=expression(-log[10]~'('*'P'*')')) +
theme_minimal()+
theme(legend.title =element_text(size=lengendTitleSize ,face = "plain"),
legend.text=element_text(size=lengendTextSize,face = "plain"),
axis.text.x = element_text(angle = 30, vjust = 1,
size = axisTextSize, hjust = 1,face="plain", color = "black"), #bold
axis.text.y = element_text(size = axisTextSize,face = "plain", color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank()  )+
theme(legend.position="top") +
# ggtitle(paste(para, "_", a1*1000,a2*1000,sep = "")) +
theme(plot.title = element_text(vjust = -2, face = "plain",color = "blue", size = 18)) +
coord_fixed()
return(p1)
}
p1 = hyper_vis(class1 = ge.prog$MSCRC, class2 = ge.prog$CMS)
p2 = hyper_vis(class1 = merged_pdata_02$MSCRC , class2 = merged_pdata_02$rf)
p2
hyper_vis = function(class1,class2){
# phyper() gives the distribution function
# ak_mn_hyper <- table(merged_pdata$MultiLabel, merged_pdata$CMS_final_network_plus_RFclassifier_in_nonconsensus_samples)
ak_mn_hyper <- table(class1,class2)
print(ak_mn_hyper)
oN<-matrix(NA,nrow=nrow(ak_mn_hyper),ncol=ncol(ak_mn_hyper))
for(i in 1:nrow(ak_mn_hyper)){
for(j in 1:ncol(ak_mn_hyper)){
oN[i,j]<-phyper(ak_mn_hyper[i,j]-1,sum(ak_mn_hyper[,j]),sum(ak_mn_hyper)-sum(ak_mn_hyper[,j]),sum(ak_mn_hyper[i,]),lower.tail=FALSE)
}
}
oN
oN <- matrix(p.adjust(oN),ncol = length(unique(class2)), byrow = F)
oN[which(oN==0)] = 1e-270
oN_log10 <- -log10(oN)
# sec_min = min(oN[oN!=min(oN)])
# oN_log10 = -log10(oN+sec_min/2)
rownames(oN_log10)<-  rownames(ak_mn_hyper)
colnames(oN_log10)<- colnames(ak_mn_hyper)
oN_log10[oN_log10 > 10]=10
# oN_log10[oN_log10 > 20]=20
oN_log10
require(reshape)
oN_melt <- melt(oN_log10)
require(ggplot2)
lengendTitleSize = 9
axisTextSize = 9
lengendTextSize = 9
p1<-ggplot(data = oN_melt, aes(X1, X2, fill = value))+
geom_tile(color = "gray")+  ##add gray line between block
geom_text(aes(label=round(value,2))) +
scale_fill_gradient2(low ="white", high = "darkred",
# midpoint =3,
# midpoint =-log10(0.05),
# limit = c(0,300),
space = "Lab",   #  #fc6c85  red #f5c767yellow
name=expression(-log[10]~'('*'P'*')')) +
theme_minimal()+
theme(legend.title =element_text(size=lengendTitleSize ,face = "plain"),
legend.text=element_text(size=lengendTextSize,face = "plain"),
axis.text.x = element_text(angle = 30, vjust = 1,
size = axisTextSize, hjust = 1,face="plain", color = "black"), #bold
axis.text.y = element_text(size = axisTextSize,face = "plain", color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank()  )+
theme(legend.position="top") +
# ggtitle(paste(para, "_", a1*1000,a2*1000,sep = "")) +
theme(plot.title = element_text(vjust = -2, face = "plain",color = "blue", size = 18)) +
coord_fixed()
return(p1)
}
p2 = hyper_vis(class1 = merged_pdata_02$MSCRC , class2 = merged_pdata_02$rf)
p2
hyper_vis = function(class1,class2){
# phyper() gives the distribution function
# ak_mn_hyper <- table(merged_pdata$MultiLabel, merged_pdata$CMS_final_network_plus_RFclassifier_in_nonconsensus_samples)
ak_mn_hyper <- table(class1,class2)
print(ak_mn_hyper)
oN<-matrix(NA,nrow=nrow(ak_mn_hyper),ncol=ncol(ak_mn_hyper))
for(i in 1:nrow(ak_mn_hyper)){
for(j in 1:ncol(ak_mn_hyper)){
oN[i,j]<-phyper(ak_mn_hyper[i,j]-1,sum(ak_mn_hyper[,j]),sum(ak_mn_hyper)-sum(ak_mn_hyper[,j]),sum(ak_mn_hyper[i,]),lower.tail=FALSE)
}
}
oN
oN <- matrix(p.adjust(oN),ncol = length(unique(class2)), byrow = F)
oN[which(oN==0)] = 1e-270
oN_log10 <- -log10(oN)
# sec_min = min(oN[oN!=min(oN)])
# oN_log10 = -log10(oN+sec_min/2)
rownames(oN_log10)<-  rownames(ak_mn_hyper)
colnames(oN_log10)<- colnames(ak_mn_hyper)
# oN_log10[oN_log10 > 10]=10
oN_log10[oN_log10 > 20]=20
oN_log10
require(reshape)
oN_melt <- melt(oN_log10)
require(ggplot2)
lengendTitleSize = 9
axisTextSize = 9
lengendTextSize = 9
p1<-ggplot(data = oN_melt, aes(X1, X2, fill = value))+
geom_tile(color = "gray")+  ##add gray line between block
geom_text(aes(label=round(value,2))) +
scale_fill_gradient2(low ="white", high = "darkred",
# midpoint =3,
# midpoint =-log10(0.05),
# limit = c(0,300),
space = "Lab",   #  #fc6c85  red #f5c767yellow
name=expression(-log[10]~'('*'P'*')')) +
theme_minimal()+
theme(legend.title =element_text(size=lengendTitleSize ,face = "plain"),
legend.text=element_text(size=lengendTextSize,face = "plain"),
axis.text.x = element_text(angle = 30, vjust = 1,
size = axisTextSize, hjust = 1,face="plain", color = "black"), #bold
axis.text.y = element_text(size = axisTextSize,face = "plain", color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank()  )+
theme(legend.position="top") +
# ggtitle(paste(para, "_", a1*1000,a2*1000,sep = "")) +
theme(plot.title = element_text(vjust = -2, face = "plain",color = "blue", size = 18)) +
coord_fixed()
return(p1)
}
# CMS label
p2 = hyper_vis(class1 = pdata$MSCRC , class2 = pdata$CMS_final_network_plus_RFclassifier_in_nonconsensus_samples)
p2
library(rstudioapi)
current_file <- getActiveDocumentContext()$path
print(current_file)
hyper_vis = function(class1,class2){
# phyper() gives the distribution function
# ak_mn_hyper <- table(merged_pdata$MultiLabel, merged_pdata$CMS_final_network_plus_RFclassifier_in_nonconsensus_samples)
ak_mn_hyper <- table(class1,class2)
print(ak_mn_hyper)
oN<-matrix(NA,nrow=nrow(ak_mn_hyper),ncol=ncol(ak_mn_hyper))
for(i in 1:nrow(ak_mn_hyper)){
for(j in 1:ncol(ak_mn_hyper)){
oN[i,j]<-phyper(ak_mn_hyper[i,j]-1,sum(ak_mn_hyper[,j]),sum(ak_mn_hyper)-sum(ak_mn_hyper[,j]),sum(ak_mn_hyper[i,]),lower.tail=FALSE)
}
}
oN
oN <- matrix(p.adjust(oN),ncol = length(unique(class2)), byrow = F)
oN[which(oN==0)] = 1e-270
oN_log10 <- -log10(oN)
# sec_min = min(oN[oN!=min(oN)])
# oN_log10 = -log10(oN+sec_min/2)
rownames(oN_log10)<-  rownames(ak_mn_hyper)
colnames(oN_log10)<- colnames(ak_mn_hyper)
# oN_log10[oN_log10 > 10]=10
oN_log10[oN_log10 > 20]=20
oN_log10
require(reshape)
oN_melt <- melt(oN_log10)
require(ggplot2)
lengendTitleSize = 9
axisTextSize = 9
lengendTextSize = 9
p1<-ggplot(data = oN_melt, aes(X1, X2, fill = value))+
geom_tile(color = "gray")+  ##add gray line between block
geom_text(aes(label=round(value,2))) +
scale_fill_gradient2(low ="white", high = "darkred",
# midpoint =3,
# midpoint =-log10(0.05),
# limit = c(0,300),
space = "Lab",   #  #fc6c85  red #f5c767yellow
name=expression(-log[10]~'('*'P'*')')) +
theme_minimal()+
theme(legend.title =element_text(size=lengendTitleSize ,face = "plain"),
legend.text=element_text(size=lengendTextSize,face = "plain"),
axis.text.x = element_text(angle = 30, vjust = 1,
size = axisTextSize, hjust = 1,face="plain", color = "black"), #bold
axis.text.y = element_text(size = axisTextSize,face = "plain", color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank()  )+
theme(legend.position="top") +
# ggtitle(paste(para, "_", a1*1000,a2*1000,sep = "")) +
theme(plot.title = element_text(vjust = -2, face = "plain",color = "blue", size = 18)) +
coord_fixed()
return(p1)
}
# 2.2 CIT
dataset = "CIT"
# MSCRC label
load("./rda_code_v2/CIT_GSE39582_400_525_ge_omic_label_from_NB.rda")
label= paste("MSCRC", Label,sep = "")
names(label) <- names(Label)
length(label)
# CMS label
load("D:/OneDrive - The Chinese University of Hong Kong/124severFile2024/whole_v7_20210412/Validation_codev1_550375pameuclidean/1omics_GSE39582/rda/merged_pdata_01.RData")
# merged_pdata_01
merged_pdata_02 = merged_pdata_01[-which(as.numeric(merged_pdata_01$rfs.delay)>150 | as.numeric(merged_pdata_01$os.delay)>150),]  # 486
length(merged_pdata_02$rf)
label = label[which(names(label)%in%merged_pdata_02$geo_accession)]
identical(names(label),merged_pdata_02$geo_accession)
merged_pdata_02$MSCRC = label
p2 = hyper_vis(class1 = merged_pdata_02$MSCRC , class2 = merged_pdata_02$rf)
p2
figure_fdr
fileName = paste("./",figure_fdr,"/", "v2_hyper_plot_CIT.pdf",sep = "")
pdf(file = fileName, width=3,height = 4)
p2
dev.off()
library(rstudioapi)
current_file <- getActiveDocumentContext()$path
print(current_file)
file.edit("DESCRIPTION")
setwd("D:/OneDrive - The Chinese University of Hong Kong/phd/Projects/My_project_06_multi_omic_fusion_classification/MANUSCRIPT/Code availability/20240819_v3/MSCRCclassifier")
# 让R在man文件夹中自动生成对应的.Rd文件
library(devtools)
devtools::document()
file.edit("DESCRIPTION")
# 在build之前，需要先check一下R包有没有问题
devtools::check()
# R包的build和install
devtools::build()
# 会创建一个*.tar.gz, 然后
devtools::install()
# 会创建一个*.tar.gz,
devtools::install()
# 让R在man文件夹中自动生成对应的.Rd文件
library(devtools)
devtools::document()
# 在build之前，需要先check一下R包有没有问题
devtools::check()
setwd("D:/OneDrive - The Chinese University of Hong Kong/phd/Projects/My_project_06_multi_omic_fusion_classification/MANUSCRIPT/Code availability/20240819_v3/MSCRCclassifier")
library(usethis)
file.edit("DESCRIPTION")
setwd("D:/OneDrive - The Chinese University of Hong Kong/phd/Projects/My_project_06_multi_omic_fusion_classification/MANUSCRIPT/Code availability/20240819_v3/MSCRCclassifier")
library(usethis)
# 让R在man文件夹中自动生成对应的.Rd文件
library(devtools)
devtools::document()
# 在build之前，需要先check一下R包有没有问题
devtools::check()
# R包的build和install
devtools::build()
# 创建一个*.tar.gz
devtools::install()
# (1) install
devtools::install()
